openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is Kaizntree Server based on the OpenAPI 3.0 specification.
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [Kaizntree Github](https://github.com/DhanushDK17/Kaizntree)
    - [About Kaizntree](https://www.kaizntree.com/about-us)
  contact:
    email: kumardhanush13@gmail.com
  version: 1.0.0
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: Authentication
    description: Authentication is handled using JWT Tokens
  - name: Item
    description: Item CRUD operations
  - name: Category
    description: Category CRUD operations
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Create user
      description: Create new user for the product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'          
        '401':
          description: Authentication credentials were not provided.
  /auth/token:
    post:
      tags:
        - Authentication
      summary: generate tokens
      description: Generate access and refresh tokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
  /auth/token/refresh:
    post:
      tags:
        - Authentication
      summary: generate tokens
      description: refresh access and refresh tokens
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
  /auth/token/verify:
    post:
      tags:
        - Authentication
      summary: generate tokens
      description: refresh access and refresh tokens
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '401':
          description: Token is invalid or expired.
  /api/app/items:
    post:
      tags:
        - Item
      summary: Create Item
      description: Create an item with the given details
      operationId: createItem
      requestBody:
        description: Create a new item in the inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'          
        '401':
          description: Authentication credentials were not provided.
    get:
      tags:
        - Item
      summary: Fetch Items
      description: Fetch Items
      operationId: getItems
      parameters:
        - name: page
          in: query
          description: page number
          required: false
          explode: true
          schema:
            type: integer
        - name: page_size
          in: query
          description: page size
          required: false
          explode: true
          schema:
            type: integer
        - name: name
          in: query
          description: Name
          required: false
          explode: true
          schema:
            type: string
        - name: category
          in: query
          description: Name
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'          
        '401':
          description: Authentication credentials were not provided.
  /api/app/items/:id:
    put:
      tags:
        - Item
      summary: Update Item
      description: Update Item
      operationId: updateItem
      requestBody:
        description: Create a new item in the inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          description: Authentication credentials were not provided.
    delete:
      tags:
        - Item
      summary: Delete Item
      description: Delete Item
      operationId: deleteItem
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'          
        '401':
          description: Authentication credentials were not provided.
  /api/app/categories:
    get:
      tags:
        - Category
      summary: Fetch categories
      description: Get categories in the inventory
      operationId: getCategories
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Authentication credentials were not provided.
    post:
      tags:
        - Category
      summary: Create Category
      description: Create a category with the given details
      operationId: createCategory
      requestBody:
        description: Create a new category in the inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'          
        '401':
          description: Authentication credentials were not provided.
  /api/app/categories/:id:
    patch:
      tags:
        - Category
      summary: Update Category
      description: Update a category with the given details
      operationId: updateCategory
      requestBody:
        description: Update a new category in the inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'          
        '401':
          description: Authentication credentials were not provided.
    delete:
      tags:
        - Category
      summary: delete Category
      description: delete a category with the given details
      operationId: deleteCategory
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
        '401':
          description: Authentication credentials were not provided.
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: ronan12
        email:
          type: string
          example: sample@example.com
        password:
          type: string
          example: somestrongpasswordwith121313
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        sku:
          type: string
          format: int64
          example: BEEWAX2
        name:
          type: string
          format: int64
          example: Some price 
        category:
          type: string
          format: int32
          example: 7
        available_stock:
          type: integer
          format: "290299"
        stock_status:
          type: boolean
          description: Order Status
          example: false
          enum:
            - false
            - true
        complete:
          type: boolean
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Tokens:
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string
  requestBodies:
    Item:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Item'
    User:
      description: user object
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    accessToken:
      type: apiKey
      name: access_token
      in: header